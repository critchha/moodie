
# 🎬 Mood-Based Plex Recommender – Enhanced Product Requirements Document

## Project Overview

A locally hosted application that recommends movies or TV shows from a Plex Media Server based on user-selected mood, available time, and preferred content type. It introduces a "Comfort Mode" for rewatching frequently viewed content and includes wildcard suggestions to encourage discovery. The system evolves with user feedback, using lightweight machine learning for personalized scoring.

---

## Goals

- Provide smart, mood-based recommendations from Plex content.
- Support time-constrained suggestions (e.g., under 1 hour).
- Introduce Comfort Mode for rewatch-friendly recommendations.
- Add surprise/wildcard suggestion option.
- Enable machine learning model to improve over time.
- Host fully locally in a Dockerized setup.

---

## Target Audience

- Plex users with large libraries who experience choice fatigue.
- Users wanting quick suggestions tailored to time, mood, and social context.
- Individuals who enjoy rewatching favorites or discovering hidden gems.

---

## Core Features

### 1. Plex Integration
- Connect to Plex Media Server via PlexAPI.
- Pull metadata: title, genre, runtime, type, rating, view count, summary.

### 2. Enhanced Mood-Based Questionnaire
- Questions:
  - Time available (<1h, 1–2h, 2+h)
  - Mood (Light/Funny, Action, Dark, Emotional, etc.)
  - Format (Movie, Show, Any)
  - Comfort Mode (On/Off)
  - Surprise Pick (Yes/No)

### 3. Recommendation Engine with Weights
- Filter by:
  - Duration fit
  - Genre/mood match
  - Content type
  - Watched history
- Score using a weighted system:
  - +10 = Unwatched
  - +7 = Rewatched ≥ 3 times (if Comfort Mode ON)
  - +10 = Perfect time match
  - +10 = Mood match
  - +5 = Partial mood match
  - +5 = Format match

### 4. Feedback Logging
- After viewing:
  - Watched to completion?
  - Would watch again?
  - 1–5 star rating
- Logged in SQLite or local JSON

### 5. Output Options
- Primary Suggestion (best fit)
- Backup Suggestion (alternative strong fit)
- Wildcard Suggestion (intentional mismatch to boost discovery)

---

## Technical Stack

- **Frontend**: HTML/JS or React + Tailwind
- **Backend**: Python (FastAPI or Flask)
- **Database**: SQLite (for tracking feedback/logs)
- **ML**: Scikit-learn + joblib (for scoring model)
- **Containerization**: Docker

---

## API Endpoints

- `GET /recommend`: Input user preferences, return 3 suggestions
- `POST /feedback`: Log user feedback for ML training
- `POST /train`: Manual model retraining

---

## Configuration

### JSON Scoring Config
```json
{
  "weights": {
    "unwatched_bonus": 10,
    "frequent_rewatch_bonus": 7,
    "time_perfect_match": 10,
    "time_close_match": 5,
    "mood_match": 10,
    "mood_partial_match": 5,
    "format_match": 5
  },
  "comfort_mode_threshold": 3
}
```

---

## Milestones

| Milestone                        | Description                                   | Target Date |
|----------------------------------|-----------------------------------------------|-------------|
| Enhanced UI Mockup               | Modern movie-style interface                  | Complete    |
| Comfort Mode Toggle              | Add option to allow rewatch-based suggestions | Week 1      |
| Weighted Scoring Logic           | Implement configurable weight system          | Week 1      |
| Feedback Logging with SQLite     | Capture user feedback                         | Week 2      |
| Wildcard Suggestion Engine       | Integrate third “surprise” option             | Week 2      |
| Docker Packaging                 | Finalize local deployment                     | Week 3      |

---

## Success Criteria

- Time + mood + format + rewatch-aware filtering works accurately.
- 3 suggestions (main, alt, wildcard) always returned.
- Comfort Mode effectively influences suggestions.
- Users can give feedback and influence future picks.
- App runs fully offline with Docker and Plex access.
