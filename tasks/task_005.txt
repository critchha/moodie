# Task ID: 5
# Title: Implement Recommendation Engine Core Logic
# Status: done
# Dependencies: 2, 3, 4
# Priority: high
# Description: Develop the core recommendation engine that filters and scores content based on user preferences.
# Details:
1. Create a recommendation engine class that implements the weighted scoring system:

```python
class RecommendationEngine:
    def __init__(self, plex_connector, db_connector, config):
        self.plex = plex_connector
        self.db = db_connector
        self.config = config
        self.weights = config['weights']
    
    def filter_by_duration(self, media_list, time_available):
        # Filter media based on duration
        if time_available == '<1h':
            return [m for m in media_list if m['duration'] < 3600000]  # < 1 hour in ms
        elif time_available == '1-2h':
            return [m for m in media_list if 3600000 <= m['duration'] <= 7200000]
        else:  # '2+h'
            return [m for m in media_list if m['duration'] > 7200000]
    
    def filter_by_format(self, media_list, format_preference):
        # Filter by content type
        if format_preference == 'Any':
            return media_list
        return [m for m in media_list if m['type'].lower() == format_preference.lower()]
    
    def score_media(self, media, preferences):
        score = 0
        
        # Unwatched bonus
        if media['view_count'] == 0:
            score += self.weights['unwatched_bonus']
        
        # Comfort mode (frequently rewatched)
        if preferences['comfort_mode'] and media['view_count'] >= self.config['comfort_mode_threshold']:
            score += self.weights['frequent_rewatch_bonus']
        
        # Time match scoring
        # ... (implementation details)
        
        # Mood match scoring
        # ... (implementation details)
        
        # Format match
        # ... (implementation details)
        
        return score
    
    def get_recommendations(self, preferences):
        # Get all media from Plex
        all_media = self.plex.get_all_movies() + self.plex.get_all_shows()
        media_metadata = [self.plex.get_media_metadata(m) for m in all_media]
        
        # Apply filters
        filtered_media = self.filter_by_duration(media_metadata, preferences['time_available'])
        filtered_media = self.filter_by_format(filtered_media, preferences['format'])
        
        # Score all filtered media
        scored_media = [(m, self.score_media(m, preferences)) for m in filtered_media]
        scored_media.sort(key=lambda x: x[1], reverse=True)
        
        # Get primary and backup recommendations
        primary = scored_media[0][0] if scored_media else None
        backup = scored_media[1][0] if len(scored_media) > 1 else None
        
        # Get wildcard if requested
        wildcard = None
        if preferences['surprise_pick']:
            # ... (implementation for wildcard selection)
        
        return {
            'primary': primary,
            'backup': backup,
            'wildcard': wildcard
        }
```

2. Implement mood mapping to genres
3. Create time duration mapping logic
4. Implement the weighted scoring algorithm according to the PRD
5. Add wildcard selection logic that intentionally chooses content outside the user's typical preferences

# Test Strategy:
1. Unit test each filtering function
2. Test scoring algorithm with various media and preference combinations
3. Verify wildcard selection produces diverse recommendations
4. Test edge cases (empty library, all content watched, etc.)
5. Benchmark performance with large media libraries

# Subtasks:
## 1. Create RecommendationEngine class structure [done]
### Dependencies: None
### Description: Design and implement the base RecommendationEngine class with core methods and properties
### Details:
Create a class with initialization methods, input validation, and interface for recommendation generation. Include methods for data loading, configuration settings, and result formatting. Establish proper error handling and logging.

## 2. Implement content filtering functions [done]
### Dependencies: 5.1
### Description: Develop functions to filter content based on user preferences and constraints
### Details:
Create filtering mechanisms for content type, genre, language, release date, and content rating. Implement exclusion logic for previously watched content and user-specific blacklists. Ensure filters can be combined and prioritized.

## 3. Develop core scoring algorithm [done]
### Dependencies: 5.1, 5.2
### Description: Create the algorithm that assigns relevance scores to content items
### Details:
Implement a scoring system that evaluates content based on multiple factors including user history, preferences, and content metadata. Create normalization functions to ensure scores are comparable across different content types and sources.

## 4. Create mood-to-genre mapping system [done]
### Dependencies: 5.1
### Description: Implement logic to translate user mood inputs into appropriate genre recommendations
### Details:
Develop a comprehensive mapping between mood states (happy, sad, excited, etc.) and corresponding content genres. Include intensity factors and combination rules for mixed moods. Create a flexible configuration system for easy updates.

## 5. Implement duration-based content selection [done]
### Dependencies: 5.1, 5.2
### Description: Create logic to recommend content based on user's available time
### Details:
Develop algorithms to match content duration with user's available time. Include options for single items, series episodes, or combinations. Handle special cases like partial viewing and resuming content.

## 6. Implement weighted scoring system [done]
### Dependencies: 5.3, 5.4, 5.5
### Description: Create a configurable weighted scoring system that combines multiple factors
### Details:
Develop a system that applies different weights to various scoring factors based on user preferences and context. Include dynamic weight adjustment based on user feedback and viewing patterns. Implement A/B testing capability for weight optimization.

## 7. Add wildcard/diversity selection logic [done]
### Dependencies: 5.3, 5.6
### Description: Implement logic to include occasional unexpected recommendations for discovery
### Details:
Create algorithms to occasionally include diverse content outside the user's typical preferences. Implement controlled randomness with configurable frequency and deviation parameters. Include logic to track and evaluate user response to wildcard recommendations.

## 8. Optimize recommendation engine performance [done]
### Dependencies: 5.2, 5.3, 5.6, 5.7
### Description: Improve algorithm efficiency and response time
### Details:
Profile and optimize the recommendation generation process. Implement caching strategies, parallel processing where applicable, and algorithm optimizations. Create benchmarking tools to measure and compare performance improvements. Ensure the engine can handle large datasets efficiently.

