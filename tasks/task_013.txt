# Task ID: 13
# Title: Implement Configuration Management
# Status: done
# Dependencies: 5
# Priority: low
# Description: Create a system for managing and updating the scoring weights and other configuration parameters.
# Details:
1. Create a configuration management module:
```python
import json
import os
from typing import Dict, Any

class ConfigManager:
    def __init__(self, config_path="config/scoring_config.json"):
        self.config_path = config_path
        self.config = self.load_config()
    
    def load_config(self) -> Dict[str, Any]:
        # Default configuration
        default_config = {
            "weights": {
                "unwatched_bonus": 10,
                "frequent_rewatch_bonus": 7,
                "time_perfect_match": 10,
                "time_close_match": 5,
                "mood_match": 10,
                "mood_partial_match": 5,
                "format_match": 5
            },
            "comfort_mode_threshold": 3,
            "auto_train_on_feedback": True,
            "feedback_count_for_training": 10,
            "wildcard_selection_strategy": "genre_mismatch"
        }
        
        # Create directory if it doesn't exist
        os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
        
        # Load from file if exists
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r') as f:
                    loaded_config = json.load(f)
                    # Merge with defaults to ensure all keys exist
                    for key, value in loaded_config.items():
                        if key in default_config and isinstance(value, dict) and isinstance(default_config[key], dict):
                            default_config[key].update(value)
                        else:
                            default_config[key] = value
            except Exception as e:
                print(f"Error loading config: {e}")
        else:
            # Save default config if file doesn't exist
            self.save_config(default_config)
        
        return default_config
    
    def save_config(self, config=None) -> bool:
        if config is None:
            config = self.config
        
        try:
            with open(self.config_path, 'w') as f:
                json.dump(config, f, indent=2)
            return True
        except Exception as e:
            print(f"Error saving config: {e}")
            return False
    
    def update_config(self, updates: Dict[str, Any]) -> bool:
        # Update configuration recursively
        def update_dict(d, u):
            for k, v in u.items():
                if isinstance(v, dict) and k in d and isinstance(d[k], dict):
                    update_dict(d[k], v)
                else:
                    d[k] = v
        
        update_dict(self.config, updates)
        return self.save_config()
    
    def get_config(self) -> Dict[str, Any]:
        return self.config
```

2. Create API endpoints for viewing and updating configuration
3. Implement admin UI for configuration management
4. Add validation for configuration parameters
5. Implement configuration versioning and rollback
6. Create automatic backup of configuration files

# Test Strategy:
1. Test loading and saving configuration files
2. Verify default values are applied correctly
3. Test configuration updates with various parameters
4. Verify validation prevents invalid configurations
5. Test versioning and rollback functionality
6. Verify API endpoints for configuration management

# Subtasks:
## 1. Develop Configuration Manager Module [done]
### Dependencies: None
### Description: Create a core module that handles reading, writing, and validating configuration files
### Details:
Implement a configuration manager class that can load configuration from files, provide access methods for retrieving configuration values, handle different configuration formats (JSON, YAML), and implement basic error handling for missing or corrupt configuration files.

## 2. Create API Endpoints for Configuration [done]
### Dependencies: 13.1
### Description: Develop REST API endpoints for retrieving and updating configuration values
### Details:
Design and implement RESTful API endpoints that allow getting current configuration, updating specific configuration values, and reloading configuration from disk. Include proper authentication and authorization checks for these sensitive endpoints.

## 3. Implement Configuration Validation Logic [done]
### Dependencies: 13.1
### Description: Create validation rules and logic to ensure configuration values meet required constraints
### Details:
Develop a validation framework that can check configuration values against type constraints, range limits, required fields, and other business rules. Implement validation during both configuration loading and when updates are made through the API.

## 4. Build Admin UI for Configuration Management [done]
### Dependencies: 13.2, 13.3
### Description: Create a user interface for administrators to view and modify configuration settings
### Details:
Design and implement a web-based UI that displays current configuration values in a structured format, allows editing with appropriate input controls, shows validation errors, and confirms changes before saving. Include search and filtering capabilities for large configuration sets.

## 5. Implement Configuration Versioning and Backup [done]
### Dependencies: 13.1, 13.2
### Description: Add functionality to track configuration changes, create backups, and restore previous versions
### Details:
Develop a system to automatically create backups before configuration changes, maintain a history of changes with timestamps and user information, and provide functionality to compare and restore previous configuration versions when needed.

