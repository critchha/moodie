# Task ID: 12
# Title: Implement Feedback Collection UI
# Status: done
# Dependencies: 8, 10
# Priority: medium
# Description: Create a user interface for collecting feedback after watching recommended content.
# Details:
1. Create a Feedback Form component:
```jsx
import React, { useState } from 'react';

const FeedbackForm = ({ media, onSubmit, onCancel }) => {
  const [feedback, setFeedback] = useState({
    mediaId: media.id,
    watchedCompletion: true,
    wouldWatchAgain: null,
    rating: 0
  });
  
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFeedback({
      ...feedback,
      [name]: type === 'checkbox' ? checked : value
    });
  };
  
  const handleRatingChange = (rating) => {
    setFeedback({
      ...feedback,
      rating
    });
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(feedback);
  };
  
  return (
    <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <h2 className="text-xl font-bold mb-4">How was {media.title}?</h2>
      
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              name="watchedCompletion"
              checked={feedback.watchedCompletion}
              onChange={handleChange}
              className="mr-2"
            />
            <span className="text-gray-700">I watched it to completion</span>
          </label>
        </div>
        
        <div className="mb-4">
          <p className="block text-gray-700 text-sm font-bold mb-2">Would you watch this again?</p>
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                name="wouldWatchAgain"
                value="true"
                checked={feedback.wouldWatchAgain === true}
                onChange={() => setFeedback({...feedback, wouldWatchAgain: true})}
                className="mr-2"
              />
              <span className="text-gray-700">Yes</span>
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="wouldWatchAgain"
                value="false"
                checked={feedback.wouldWatchAgain === false}
                onChange={() => setFeedback({...feedback, wouldWatchAgain: false})}
                className="mr-2"
              />
              <span className="text-gray-700">No</span>
            </label>
          </div>
        </div>
        
        <div className="mb-6">
          <p className="block text-gray-700 text-sm font-bold mb-2">Rating</p>
          <div className="flex space-x-2">
            {[1, 2, 3, 4, 5].map((star) => (
              <button
                key={star}
                type="button"
                onClick={() => handleRatingChange(star)}
                className={`text-2xl ${feedback.rating >= star ? 'text-yellow-500' : 'text-gray-300'}`}
              >
                â˜…
              </button>
            ))}
          </div>
        </div>
        
        <div className="flex items-center justify-between">
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={feedback.wouldWatchAgain === null || feedback.rating === 0}
          >
            Submit Feedback
          </button>
          <button
            type="button"
            onClick={onCancel}
            className="text-gray-500 hover:text-gray-700"
          >
            Skip
          </button>
        </div>
      </form>
    </div>
  );
};

export default FeedbackForm;
```

2. Implement API service for submitting feedback
3. Create modal for feedback collection
4. Add validation for required fields
5. Implement success/error notifications
6. Create reminder system for collecting feedback

# Test Strategy:
1. Test form validation with various input combinations
2. Verify API integration for feedback submission
3. Test modal appearance and dismissal
4. Verify star rating functionality
5. Test form submission with valid and invalid data
6. Verify success/error notifications display correctly

# Subtasks:
## 1. Create Feedback Form Component [done]
### Dependencies: None
### Description: Design and implement the feedback form UI component with appropriate fields and styling
### Details:
Create a reusable feedback form component with fields for rating, comments, and user information. Implement responsive design for mobile and desktop views. Include proper styling according to the application's design system.

## 2. Implement Form Validation [done]
### Dependencies: 12.1
### Description: Add client-side validation to the feedback form to ensure data quality
### Details:
Implement validation rules for all form fields including required fields, character limits, and format validation. Add visual indicators for validation errors and helpful error messages. Ensure validation runs on both input change and form submission.

## 3. Integrate with Feedback API [done]
### Dependencies: 12.1, 12.2
### Description: Connect the feedback form to the backend API for data submission
### Details:
Create service functions to handle API communication. Implement proper error handling for network failures. Add loading states during submission. Ensure the form data is correctly formatted according to API requirements.

## 4. Implement Notification System [done]
### Dependencies: 12.3
### Description: Add success and error notifications for feedback submission
### Details:
Create toast or notification components to display submission status. Implement success messages with appropriate styling. Handle different error scenarios with helpful error messages. Ensure notifications are accessible and can be dismissed by users.

