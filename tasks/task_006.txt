# Task ID: 6
# Title: Implement Comfort Mode Logic
# Status: done
# Dependencies: 5
# Priority: medium
# Description: Develop the Comfort Mode feature that recommends frequently rewatched content.
# Details:
1. Extend the recommendation engine to handle Comfort Mode:

```python
def apply_comfort_mode(self, media_list, comfort_mode_enabled):
    if not comfort_mode_enabled:
        return media_list
    
    # Get threshold from config
    threshold = self.config['comfort_mode_threshold']
    
    # Boost scores for frequently watched content
    for media in media_list:
        if media['view_count'] >= threshold:
            media['score'] += self.weights['frequent_rewatch_bonus']
    
    return media_list
```

2. Update the database schema to track view counts
3. Implement logic to sync Plex view counts with local database
4. Add UI toggle for Comfort Mode in the frontend
5. Create a configuration option for the rewatch threshold (default: 3)

# Test Strategy:
1. Test that media with view counts >= threshold get proper score boost
2. Verify Comfort Mode toggle correctly influences recommendations
3. Test with various threshold values
4. Verify database correctly tracks and updates view counts
5. Test edge cases (all content watched multiple times, no rewatched content)

# Subtasks:
## 1. Design Comfort Mode Algorithm [done]
### Dependencies: None
### Description: Create the algorithm that will identify and prioritize familiar content for users in comfort mode
### Details:
Analyze user viewing patterns to identify what constitutes 'comfortable' content. Modify the recommendation scoring algorithm to increase weights for previously watched content, content from favorite creators, and genres the user frequently engages with. Document the algorithm design and expected behavior.

## 2. Update Database Schema for Comfort Mode [done]
### Dependencies: 6.1
### Description: Modify the database schema to support comfort mode preferences and content categorization
### Details:
Add a comfort_mode_enabled boolean field to the user preferences table. Create a comfort_content_categories table to track content types that qualify as 'comfort' content. Add relationships between user history and comfort categories. Create migration scripts for the schema changes.

## 3. Implement View Count Synchronization [done]
### Dependencies: 6.2
### Description: Develop the system to track and synchronize view counts for determining comfort content
### Details:
Create a service that tracks how many times a user has viewed specific content. Implement a background job that periodically updates comfort content scores based on view counts. Add caching layer to optimize performance for frequently accessed comfort content metrics.

## 4. Integrate Comfort Mode with UI [done]
### Dependencies: 6.2, 6.3
### Description: Add UI controls and visual indicators for comfort mode in the application
### Details:
Add a comfort mode toggle in user settings. Create visual indicators for content that qualifies as comfort content. Implement a dedicated 'Comfort Picks' section in the recommendation UI. Add tooltips explaining the comfort mode feature to users.

